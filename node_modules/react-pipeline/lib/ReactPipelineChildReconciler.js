'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ReactChildReconciler = require('react/lib/ReactChildReconciler');

var _ReactChildReconciler2 = _interopRequireDefault(_ReactChildReconciler);

var _traverseAllChildren = require('react/lib/traverseAllChildren');

var _traverseAllChildren2 = _interopRequireDefault(_traverseAllChildren);

var _warning = require('fbjs/lib/warning');

var _warning2 = _interopRequireDefault(_warning);

var _Object = require('react/lib/Object.assign');

var _Object2 = _interopRequireDefault(_Object);

var _instantiatePipelineComponent = require('./instantiatePipelineComponent');

var _instantiatePipelineComponent2 = _interopRequireDefault(_instantiatePipelineComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function instantiateChild(childInstances, child, name) {
  // We found a component instance.
  var keyUnique = childInstances[name] === undefined;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
  }
  if (child != null && keyUnique) {
    childInstances[name] = (0, _instantiatePipelineComponent2.default)(child, null);
  }
}

var ReactPipelineChildReconciler = (0, _Object2.default)({}, _ReactChildReconciler2.default, {
  /**
   * Generates a "mount image" for each of the supplied children. In the case
   * of `ReactDOMComponent`, a mount image is a string of markup.
   *
   * This is identical to the same method found within
   * react/lib/ReactChildReconciler, with the exception we are using our own
   * custom instantiatePipelineComponent method.
   *
   * @param {?object} nestedChildNodes Nested child maps.
   * @return {?object} A set of child instances.
   * @internal
   */
  instantiateChildren: function instantiateChildren(nestedChildNodes) {
    if (nestedChildNodes == null) {
      return null;
    }
    var childInstances = {};
    (0, _traverseAllChildren2.default)(nestedChildNodes, instantiateChild, childInstances);
    return childInstances;
  }
});

exports.default = ReactPipelineChildReconciler;