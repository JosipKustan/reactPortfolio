'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ReactServerRenderingTransaction = require('react/lib/ReactServerRenderingTransaction');

var _ReactServerRenderingTransaction2 = _interopRequireDefault(_ReactServerRenderingTransaction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
 * during the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function initialize() {
    this.reactMountReady.reset();
  },

  /**
   * Process all `onDOMReady` callbacks. This is what sets
   * ReactPipelineRenderingTransaction apart from
   * ReactServerRenderingTransaction. It ensures all lifecycle methods are
   * called.
   */
  close: function close() {
    this.reactMountReady.notifyAll();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];

var ReactPipelineRenderingTransaction = function (_ReactServerRendering) {
  _inherits(ReactPipelineRenderingTransaction, _ReactServerRendering);

  function ReactPipelineRenderingTransaction(renderToStaticMarkup) {
    _classCallCheck(this, ReactPipelineRenderingTransaction);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(ReactPipelineRenderingTransaction).call(this, renderToStaticMarkup));
  }

  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap procedures.
   */


  _createClass(ReactPipelineRenderingTransaction, [{
    key: 'getTransactionWrappers',
    value: function getTransactionWrappers() {
      return TRANSACTION_WRAPPERS;
    }
  }]);

  return ReactPipelineRenderingTransaction;
}(_ReactServerRenderingTransaction2.default);

exports.default = ReactPipelineRenderingTransaction;